// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"gocc_babyduck/ast"
	"gocc_babyduck/token"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Programa	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Programa : program id semicolon VARS_PROG FUNCS_PROG main Body end	<<  >>`,
		Id:         "Programa",
		NTType:     1,
		Index:      1,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VARS_PROG : VARS	<< func() (Attrib, error) {
        // Obtener la lista de variables desde VARIABLES
        variables := X[0].([]ast.VariableInfo)

        globalVarsMap, err := ast.DeclaracionVar(variables)
        if err != nil {
            return nil, err
        }

        return globalVarsMap, nil
    }() >>`,
		Id:         "VARS_PROG",
		NTType:     2,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // Obtener la lista de variables desde VARIABLES
        variables := X[0].([]ast.VariableInfo)

        globalVarsMap, err := ast.DeclaracionVar(variables)
        if err != nil {
            return nil, err
        }

        return globalVarsMap, nil
    }()
		},
	},
	ProdTabEntry{
		String: `VARS_PROG : empty	<< ast.NewHashMap(), nil >>`,
		Id:         "VARS_PROG",
		NTType:     2,
		Index:      3,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewHashMap(), nil
		},
	},
	ProdTabEntry{
		String: `FUNCS_PROG : FUNCS FUNCS_PROG	<<  >>`,
		Id:         "FUNCS_PROG",
		NTType:     3,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FUNCS_PROG : empty	<<  >>`,
		Id:         "FUNCS_PROG",
		NTType:     3,
		Index:      5,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VARS : var VARIABLES	<< X[1], nil >>`,
		Id:         "VARS",
		NTType:     4,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `VARIABLES : ID_LIST colon TYPE semicolon MAS_VARIABLES	<< func() (Attrib, error) {
        //Crear la lista inicial con identificadores y tipo
        variables := []ast.VariableInfo{}
        
        for _, id := range X[0].([]string) {
            variables = append(variables, ast.VariableInfo{Name: id, Type: X[2].(string)})
        }

        // Agregar las variables adicionales de MAS_VARIABLES
        additionalVars := X[4].([]ast.VariableInfo)
        variables = append(variables, additionalVars...)

        return variables, nil
   }() >>`,
		Id:         "VARIABLES",
		NTType:     5,
		Index:      7,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        //Crear la lista inicial con identificadores y tipo
        variables := []ast.VariableInfo{}
        
        for _, id := range X[0].([]string) {
            variables = append(variables, ast.VariableInfo{Name: id, Type: X[2].(string)})
        }

        // Agregar las variables adicionales de MAS_VARIABLES
        additionalVars := X[4].([]ast.VariableInfo)
        variables = append(variables, additionalVars...)

        return variables, nil
   }()
		},
	},
	ProdTabEntry{
		String: `MAS_VARIABLES : VARIABLES	<< X[0], nil >>`,
		Id:         "MAS_VARIABLES",
		NTType:     6,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MAS_VARIABLES : empty	<< []ast.VariableInfo{}, nil >>`,
		Id:         "MAS_VARIABLES",
		NTType:     6,
		Index:      9,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []ast.VariableInfo{}, nil
		},
	},
	ProdTabEntry{
		String: `ID_LIST : id MAS_IDS	<< func() (Attrib, error){
        ids := append([]string{string(X[0].(*token.Token).Lit)}, X[1].([]string)...)
        return ids, nil
    }() >>`,
		Id:         "ID_LIST",
		NTType:     7,
		Index:      10,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error){
        ids := append([]string{string(X[0].(*token.Token).Lit)}, X[1].([]string)...)
        return ids, nil
    }()
		},
	},
	ProdTabEntry{
		String: `MAS_IDS : comma ID_LIST	<< X[1], nil >>`,
		Id:         "MAS_IDS",
		NTType:     8,
		Index:      11,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `MAS_IDS : empty	<< []string{}, nil >>`,
		Id:         "MAS_IDS",
		NTType:     8,
		Index:      12,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []string{}, nil
		},
	},
	ProdTabEntry{
		String: `TYPE : int	<< "int", nil >>`,
		Id:         "TYPE",
		NTType:     9,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return "int", nil
		},
	},
	ProdTabEntry{
		String: `TYPE : float	<< "float", nil >>`,
		Id:         "TYPE",
		NTType:     9,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return "float", nil
		},
	},
	ProdTabEntry{
		String: `FUNCS : void id lparen ID_LIST_FUNCS rparen lbraket VARS_FUNC Body rbraket semicolon	<< func() (Attrib, error){
            // Llamar a la función DeclararFuncion para agregar una nueva funcion
            _, err := ast.DeclararFuncion(
            string(X[1].(*token.Token).Lit), // Nombre de la función
            X[3].([]ast.VariableInfo),      // Parámetros
            X[6].(*ast.HashMap),            // Variables locales
            )

            if err != nil {
                return nil, err
            }

            // Procesar el cuerpo de la función (si es necesario)
            // Aquí puedes agregar lógica adicional para manejar el cuerpo de la función

            // Finalizar la función actual
            ast.FinalizarFuncion()

            return nil, nil
        }() >>`,
		Id:         "FUNCS",
		NTType:     10,
		Index:      15,
		NumSymbols: 10,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error){
            // Llamar a la función DeclararFuncion para agregar una nueva funcion
            _, err := ast.DeclararFuncion(
            string(X[1].(*token.Token).Lit), // Nombre de la función
            X[3].([]ast.VariableInfo),      // Parámetros
            X[6].(*ast.HashMap),            // Variables locales
            )

            if err != nil {
                return nil, err
            }

            // Procesar el cuerpo de la función (si es necesario)
            // Aquí puedes agregar lógica adicional para manejar el cuerpo de la función

            // Finalizar la función actual
            ast.FinalizarFuncion()

            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `VARS_FUNC : VARS	<< func() (Attrib, error){
        //Obtener la lista de variables desde VARIABLES
        variables := X[0].([]ast.VariableInfo)

        // Registrar las variables en la tabla local de la función actual
        localVarsMap, err := ast.DeclaracionVarLocal(variables)
        if err != nil {
            return nil, err
        }

        return localVarsMap, nil
    }() >>`,
		Id:         "VARS_FUNC",
		NTType:     11,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error){
        //Obtener la lista de variables desde VARIABLES
        variables := X[0].([]ast.VariableInfo)

        // Registrar las variables en la tabla local de la función actual
        localVarsMap, err := ast.DeclaracionVarLocal(variables)
        if err != nil {
            return nil, err
        }

        return localVarsMap, nil
    }()
		},
	},
	ProdTabEntry{
		String: `VARS_FUNC : empty	<< ast.NewHashMap(), nil >>`,
		Id:         "VARS_FUNC",
		NTType:     11,
		Index:      17,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewHashMap(), nil
		},
	},
	ProdTabEntry{
		String: `ID_LIST_FUNCS : ID_FUNCS MAS_ID_FUNCS	<< func() (Attrib, error){
        params := append([]ast.VariableInfo{X[0].(ast.VariableInfo)}, X[1].([]ast.VariableInfo)...)
        return params, nil
    }() >>`,
		Id:         "ID_LIST_FUNCS",
		NTType:     12,
		Index:      18,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error){
        params := append([]ast.VariableInfo{X[0].(ast.VariableInfo)}, X[1].([]ast.VariableInfo)...)
        return params, nil
    }()
		},
	},
	ProdTabEntry{
		String: `ID_LIST_FUNCS : empty	<< []ast.VariableInfo{}, nil >>`,
		Id:         "ID_LIST_FUNCS",
		NTType:     12,
		Index:      19,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []ast.VariableInfo{}, nil
		},
	},
	ProdTabEntry{
		String: `MAS_ID_FUNCS : comma ID_FUNCS MAS_ID_FUNCS	<< func() (Attrib, error){
        params := append([]ast.VariableInfo{X[1].(ast.VariableInfo)}, X[2].([]ast.VariableInfo)...)
        return params, nil
    }() >>`,
		Id:         "MAS_ID_FUNCS",
		NTType:     13,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error){
        params := append([]ast.VariableInfo{X[1].(ast.VariableInfo)}, X[2].([]ast.VariableInfo)...)
        return params, nil
    }()
		},
	},
	ProdTabEntry{
		String: `MAS_ID_FUNCS : empty	<< []ast.VariableInfo{}, nil >>`,
		Id:         "MAS_ID_FUNCS",
		NTType:     13,
		Index:      21,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []ast.VariableInfo{}, nil
		},
	},
	ProdTabEntry{
		String: `ID_FUNCS : id colon TYPE	<< func() (Attrib, error) {
        return ast.VariableInfo{Name: string(X[0].(*token.Token).Lit), Type: X[2].(string)}, nil
    }() >>`,
		Id:         "ID_FUNCS",
		NTType:     14,
		Index:      22,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return ast.VariableInfo{Name: string(X[0].(*token.Token).Lit), Type: X[2].(string)}, nil
    }()
		},
	},
	ProdTabEntry{
		String: `Body : lbrace STATEMENT_PROG rbrace	<<  >>`,
		Id:         "Body",
		NTType:     15,
		Index:      23,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `STATEMENT_PROG : STATEMENT STATEMENT_PROG	<<  >>`,
		Id:         "STATEMENT_PROG",
		NTType:     16,
		Index:      24,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `STATEMENT_PROG : empty	<<  >>`,
		Id:         "STATEMENT_PROG",
		NTType:     16,
		Index:      25,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `STATEMENT : ASSIGN	<<  >>`,
		Id:         "STATEMENT",
		NTType:     17,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `STATEMENT : CONDITION	<<  >>`,
		Id:         "STATEMENT",
		NTType:     17,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `STATEMENT : CYCLE	<<  >>`,
		Id:         "STATEMENT",
		NTType:     17,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `STATEMENT : F_CALL	<<  >>`,
		Id:         "STATEMENT",
		NTType:     17,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `STATEMENT : PRINT	<<  >>`,
		Id:         "STATEMENT",
		NTType:     17,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ASSIGN : id assign EXPRESION semicolon	<<  >>`,
		Id:         "ASSIGN",
		NTType:     18,
		Index:      31,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESION : EXP	<<  >>`,
		Id:         "EXPRESION",
		NTType:     19,
		Index:      32,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESION : EXP gt EXP	<<  >>`,
		Id:         "EXPRESION",
		NTType:     19,
		Index:      33,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESION : EXP lt EXP	<<  >>`,
		Id:         "EXPRESION",
		NTType:     19,
		Index:      34,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESION : EXP neq EXP	<<  >>`,
		Id:         "EXPRESION",
		NTType:     19,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXP : TERMINO	<<  >>`,
		Id:         "EXP",
		NTType:     20,
		Index:      36,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXP : TERMINO plus TERMINO	<<  >>`,
		Id:         "EXP",
		NTType:     20,
		Index:      37,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXP : TERMINO minus TERMINO	<<  >>`,
		Id:         "EXP",
		NTType:     20,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TERMINO : FACTOR	<<  >>`,
		Id:         "TERMINO",
		NTType:     21,
		Index:      39,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TERMINO : FACTOR multiply FACTOR	<<  >>`,
		Id:         "TERMINO",
		NTType:     21,
		Index:      40,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TERMINO : FACTOR divide FACTOR	<<  >>`,
		Id:         "TERMINO",
		NTType:     21,
		Index:      41,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FACTOR : lparen EXPRESION rparen	<<  >>`,
		Id:         "FACTOR",
		NTType:     22,
		Index:      42,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FACTOR : FACTOR_OPERADOR ID_CTE	<<  >>`,
		Id:         "FACTOR",
		NTType:     22,
		Index:      43,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FACTOR_OPERADOR : plus	<<  >>`,
		Id:         "FACTOR_OPERADOR",
		NTType:     23,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FACTOR_OPERADOR : minus	<<  >>`,
		Id:         "FACTOR_OPERADOR",
		NTType:     23,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FACTOR_OPERADOR : empty	<<  >>`,
		Id:         "FACTOR_OPERADOR",
		NTType:     23,
		Index:      46,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ID_CTE : id	<<  >>`,
		Id:         "ID_CTE",
		NTType:     24,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ID_CTE : CTE	<<  >>`,
		Id:         "ID_CTE",
		NTType:     24,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CTE : cte_int	<<  >>`,
		Id:         "CTE",
		NTType:     25,
		Index:      49,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CTE : cte_float	<<  >>`,
		Id:         "CTE",
		NTType:     25,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CONDITION : if lparen EXPRESION rparen Body ELSE_BODY semicolon	<<  >>`,
		Id:         "CONDITION",
		NTType:     26,
		Index:      51,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ELSE_BODY : else Body	<<  >>`,
		Id:         "ELSE_BODY",
		NTType:     27,
		Index:      52,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ELSE_BODY : empty	<<  >>`,
		Id:         "ELSE_BODY",
		NTType:     27,
		Index:      53,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `CYCLE : while lparen EXPRESION rparen do Body semicolon	<<  >>`,
		Id:         "CYCLE",
		NTType:     28,
		Index:      54,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `F_CALL : id lparen EXPRESION_STATEMENT rparen semicolon	<<  >>`,
		Id:         "F_CALL",
		NTType:     29,
		Index:      55,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESION_STATEMENT : EXPRESION MAS_EXPRESIONES	<<  >>`,
		Id:         "EXPRESION_STATEMENT",
		NTType:     30,
		Index:      56,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESION_STATEMENT : empty	<<  >>`,
		Id:         "EXPRESION_STATEMENT",
		NTType:     30,
		Index:      57,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `MAS_EXPRESIONES : comma EXPRESION MAS_EXPRESIONES	<<  >>`,
		Id:         "MAS_EXPRESIONES",
		NTType:     31,
		Index:      58,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MAS_EXPRESIONES : empty	<<  >>`,
		Id:         "MAS_EXPRESIONES",
		NTType:     31,
		Index:      59,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `PRINT : print lparen LISTA_PRINT rparen semicolon	<<  >>`,
		Id:         "PRINT",
		NTType:     32,
		Index:      60,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LISTA_PRINT : EXPRESION_PRINT EXPRESIONES_PRINT	<<  >>`,
		Id:         "LISTA_PRINT",
		NTType:     33,
		Index:      61,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESION_PRINT : EXPRESION	<<  >>`,
		Id:         "EXPRESION_PRINT",
		NTType:     34,
		Index:      62,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESION_PRINT : cte_string	<<  >>`,
		Id:         "EXPRESION_PRINT",
		NTType:     34,
		Index:      63,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESIONES_PRINT : comma EXPRESION_PRINT EXPRESIONES_PRINT	<<  >>`,
		Id:         "EXPRESIONES_PRINT",
		NTType:     35,
		Index:      64,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EXPRESIONES_PRINT : empty	<<  >>`,
		Id:         "EXPRESIONES_PRINT",
		NTType:     35,
		Index:      65,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
}
