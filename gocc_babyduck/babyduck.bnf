/* Lexical Items */
//Palabras reservadas
program    : 'p' 'r' 'o' 'g' 'r' 'a' 'm';
main       : 'm' 'a' 'i' 'n';
end        : 'e' 'n' 'd';
var        : 'v' 'a' 'r';
int        : 'i' 'n' 't';
float      : 'f' 'l' 'o' 'a' 't';
print      : 'p' 'r' 'i' 'n' 't';
while      : 'w' 'h' 'i' 'l' 'e';
do         : 'd' 'o';
if         : 'i' 'f';   
else       : 'e' 'l' 's' 'e';
void       : 'v' 'o' 'i' 'd';
plus       : '+';
minus      : '-';
multiply   : '*';
divide     : '/';
assign     : '=';
gt         : '>';
lt         : '<';
neq        : '!' '=';
lparen     : '(';
rparen     : ')';
lbrace     : '{';
rbrace     : '}';
lbraket    : '[';
rbraket    : ']';
comma      : ',';
semicolon  : ';'; 
colon      : ':';

//Tokens
id         : ('a'-'z' | 'A'-'Z') {( 'a'-'z' | 'A'-'Z' | '0'-'9' )} ;
cte_int : '0' | ['-'] '1'-'9' {'0'-'9'} ;
cte_float  : ['-'] '0'-'9' { '0'-'9' } '.' '0'-'9' { '0'-'9' } ;
cte_string : '"' { _char } '"' ;
_char: 'a'-'z' | 'A'-'Z' | '0'-'9' | '!' | '#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '[' | '\\' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~' | ' ' ;
!whitespace: ' '|'\t'|'\n'|'\r';


/* Syntax Part */

//DONE 
Programa:
    DECLARAR_PROGRAMA FUNCS_PROG main Body end    ;

//DONE: Declara el programa en el dir de funciones
DECLARAR_PROGRAMA:
    program id semicolon VARS_PROG
    <<
    func() (Attrib, error){
        nombrePrograma := "program" + string($1.(*token.Token).Lit)

        //agregar "program xyz" a directorio de funciones
        _, err := ast.DeclararFuncion(
            nombrePrograma,             // Nombre de la función
            []ast.VariableInfo{},       // Parámetros vacios
            $3.(*ast.HashMap),          // Variables locales
        )

        if err != nil {
            return nil, err
        }

        return nil, nil
    }()
    >>;

//DONE
VARS_PROG: //ESTAS SON VARS GLOBALES //TENGO QUE REPETIR LA MISMA REGLA CON VARS_FUNC
    VARS   
    <<
    func() (Attrib, error) {
        //lista de variables desde VARIABLES
        variables := $0.([]ast.VariableInfo)

        globalVarsMap, err := ast.DeclaracionVar(variables)
        if err != nil {
            return nil, err
        }

        return globalVarsMap, nil
    }()
    >>;

VARS_PROG:
    empty   <<ast.NewHashMap(), nil>>;

FUNCS_PROG:
    FUNCS FUNCS_PROG    ;

FUNCS_PROG:
    empty       ;

VARS:
    var VARIABLES    <<$1, nil>> ;

VARIABLES:
    ID_LIST colon TYPE semicolon MAS_VARIABLES          
   <<
   func() (Attrib, error) {
        //crear la lista inicial con identificadores y tipo
        variables := []ast.VariableInfo{}
        
        for _, id := range $0.([]string) {
            variables = append(variables, ast.VariableInfo{Name: id, Type: $2.(string)})
        }

        //agregar las variables adicionales de MAS_VARIABLES
        additionalVars := $4.([]ast.VariableInfo)
        variables = append(variables, additionalVars...)

        return variables, nil
   }()
   >>;

MAS_VARIABLES:
    VARIABLES     <<$0, nil>> ;

MAS_VARIABLES:
    empty       <<[]ast.VariableInfo{}, nil>>;

ID_LIST:
    id MAS_IDS     
    <<
    func() (Attrib, error){
        ids := append([]string{string($0.(*token.Token).Lit)}, $1.([]string)...)
        return ids, nil
    }()
    >>;      

MAS_IDS:
    comma ID_LIST           <<$1, nil>>;

MAS_IDS:
    empty      << []string{}, nil >>  ;

TYPE:
    int         <<"int", nil>>;

TYPE:
    float       <<"float", nil>>;

FUNCS:
    FUNC_PRIMERA_PARTE lbraket VARS_FUNC CUERPO_FUNC     
    <<
        func() (Attrib, error){
            ast.CurrentFunction = nil
            return nil, nil
        }()
    >>;

FUNC_PRIMERA_PARTE:
    void id lparen ID_LIST_PARAMS rparen
    <<
        func() (Attrib, error){
            // Llamar a la función DeclararFuncion para agregar una nueva funcion
            fun, err := ast.DeclararFuncion(
            string($1.(*token.Token).Lit), // Nombre de la función
            $3.([]ast.VariableInfo),      // Parámetros
            //$6.(*ast.HashMap),            // Variables locales
            ast.NewHashMap(),                //tabla de variables temporalmente vacia
            )

            if err != nil {
                return nil, err
            }

            ast.CurrentFunction = fun

            return nil, nil
        }()
    >>;

CUERPO_FUNC:
    Body rbraket semicolon      
    <<$0, nil>>;

VARS_FUNC:
    VARS    
    <<
    func() (Attrib, error){
        //Obtener la lista de variables desde VARIABLES
        variables := $0.([]ast.VariableInfo)

        // Registrar las variables en la tabla local de la función actual
        //localVarsMap, err := ast.DeclaracionVarLocal(variables)

        err := ast.InsertarVariableLocal(variables)

        if err != nil {
            return nil, err
        }

        //return localVarsMap, nil
        return nil, nil
    }()
    >>;

VARS_FUNC:
empty       <<nil, nil>>;

ID_LIST_PARAMS:
    PARAMS MAS_PARAMS      
    <<
    func() (Attrib, error){
        params := append([]ast.VariableInfo{$0.(ast.VariableInfo)}, $1.([]ast.VariableInfo)...)
        return params, nil
    }()
    >>;

ID_LIST_PARAMS:   
    empty               <<[]ast.VariableInfo{}, nil>>;

MAS_PARAMS:
    comma PARAMS MAS_PARAMS         
    <<
    func() (Attrib, error){
        params := append([]ast.VariableInfo{$1.(ast.VariableInfo)}, $2.([]ast.VariableInfo)...)
        return params, nil
    }()
    >>;

MAS_PARAMS:
    empty       <<[]ast.VariableInfo{}, nil>>;

PARAMS:
    id colon TYPE    
    <<
    func() (Attrib, error) {
        return ast.VariableInfo{Name: string($0.(*token.Token).Lit), Type: $2.(string)}, nil
    }()
    >>;

Body:
    lbrace STATEMENT_PROG rbrace        ;

STATEMENT_PROG:
    STATEMENT STATEMENT_PROG        ;

STATEMENT_PROG:  
    empty       ;

STATEMENT:
    ASSIGN     ;

STATEMENT:
    IF   ;

STATEMENT:
    CYCLE       ;

STATEMENT:
    F_CALL      ;

STATEMENT:
    PRINT       ;

ASSIGN:
    id assign EXPRESION semicolon       
    <<
    func() (Attrib, error){
        //Verificacion de variable no declarada
        nombre := string($0.(*token.Token).Lit)

        varInfo, err := ast.BuscarVariable(nombre)
        if (err != nil){
            return nil, err
        }

        //asignacion
        err = ast.GenerateQuadrupleForAssign(varInfo)
        
        if err != nil {
            return nil, err
        }
        return nil, nil
    }()
    >>;

EXPRESION:
    EXP         ;

EXPRESION:
    EXP OP_REL EXP
    <<
    func() (Attrib, error){

        err := ast.GenerateQuadrupleForExp()
        
        if err != nil {
            return nil, err
        }
        return nil, nil
    }()
    >>;

OP_REL:
    gt
    <<func() (Attrib, error){
        ast.Operadores.Push(">")
        return nil, nil
    }()
    >>;

OP_REL:
    lt
    <<func() (Attrib, error){
        ast.Operadores.Push("<")
        return nil, nil
    }()
    >>;

OP_REL:
    neq
    <<func() (Attrib, error){
        ast.Operadores.Push("!=")
        return nil, nil
    }()
    >>;

EXP:
    TERMINO        <<$0, nil>>;

EXP:
    TERMINO PLUS_OP TERMINO     
    <<
    func() (Attrib, error){
        operador := ast.Operadores.Top()

        if(operador == "+" || operador == "-") {
            err := ast.GenerateQuadrupleForExp()
            if err != nil {
                return nil, err
            }
            return nil, nil
        }
        return nil, nil 
    }()
    >>;

PLUS_OP:
    plus
    <<func() (Attrib, error){
        ast.Operadores.Push("+")
        return nil, nil
    }()
    >>;

EXP:
    TERMINO MINUS_OP TERMINO  
    <<
    func() (Attrib, error){
        operador := ast.Operadores.Top()

        if(operador == "+" || operador == "-") {
            err := ast.GenerateQuadrupleForExp()
            if err != nil {
                return nil, err
            }
            return nil, nil
        }
        return nil, nil 
    }()
    >>;

MINUS_OP:
    minus
    <<func() (Attrib, error){
        ast.Operadores.Push("-")
        return nil, nil
    }()
    >>;

TERMINO:
    FACTOR   <<$0, nil>>;

TERMINO:
    FACTOR MULT_OP FACTOR      
    <<
    func() (Attrib, error){
        operador := ast.Operadores.Top()

        if(operador == "*" || operador == "/") {
            err := ast.GenerateQuadrupleForExp()
            if err != nil {
                return nil, err
            }
            return nil, nil
        }
        return nil, nil 
    }()
    >>;

MULT_OP:
    multiply
    <<func() (Attrib, error){
        ast.Operadores.Push("*")
        return nil, nil
    }()
    >>;

TERMINO:
    FACTOR DIV_OP FACTOR    
    <<
    func() (Attrib, error){
        operador := ast.Operadores.Top()

        if(operador == "*" || operador == "/") {
            err := ast.GenerateQuadrupleForExp()
            if err != nil {
                return nil, err
            }
            return nil, nil
        }
        return nil, nil 
    }()
    >>;

DIV_OP:
    divide
    <<func() (Attrib, error){
        ast.Operadores.Push("/")
        return nil, nil
    }()
    >>;


FACTOR:
    FONDO_FALSO EXPRESION rparen   
    <<
    func() (Attrib, error){

        for !ast.Operadores.IsEmpty(){

            top := ast.Operadores.Top()
            if top == "(" {
                ast.Operadores.Pop()
                break
            }
            err := ast.GenerateQuadrupleForExp()
            if err != nil {
                return nil, err
            }
        }
        return nil, nil
    }()
    >>;

FONDO_FALSO:
    lparen
    <<
    func() (Attrib, error){
        ast.Operadores.Push("(")
        return nil, nil
    }()
    >>;

FACTOR:
    FACTOR_OPERADOR ID_CTE   <<$1,nil>>;

FACTOR_OPERADOR:
    PLUS_OP      <<$0, nil>>;

FACTOR_OPERADOR:
    MINUS_OP     <<$0, nil>>;
    
FACTOR_OPERADOR:
    empty      ;

ID_CTE:
    id      
    <<
    func() (Attrib, error){
        //Verificacion de variable no declarada
        nombre := string($0.(*token.Token).Lit)

        //Buscar variable
        varInfo, error := ast.BuscarVariable(nombre)
        if (error != nil){
            return nil, error
        }

        //Agregar a pila de Operandos
        //ast.Operandos.Push(varInfo.Name)
        ast.Operandos.Push(varInfo.Address)
        ast.Tipos.Push(varInfo.Type)
        
        return nil, nil
    }()
    >>;

ID_CTE:
    CTE  
    <<
    func() (Attrib, error){
        cte := $0.([]string) // Obtener la lista devuelta por CTE
        //valor := cte[0]
        tipo := cte[1]

        direccion := ast.Prog_MemoryManager.GetConstVarMem(tipo)

        //ast.Operandos.Push(valor)
        ast.Operandos.Push(direccion)
        ast.Tipos.Push(tipo)

        return nil, nil
    }()
    >>;

CTE:
    cte_int     
    <<
    func() (Attrib, error) {
        valor := string($0.(*token.Token).Lit)
        return []string{valor, "int"}, nil
    }()
    >>;

CTE:
    cte_float   
    <<
    func() (Attrib, error) {
        valor := string($0.(*token.Token).Lit)
        return []string{valor, "float"}, nil
    }()
    >>;

IF:
    if CONDITION Body ELSE_BODY semicolon        
    <<
    func() (Attrib, error){
        hayElse := $3.(bool)

        if(hayElse){
            goto_Jump := ast.PJumps.Pop()   //indice del goto que salta al else
            falseJump := ast.PJumps.Pop()

            //Llenar GOTO: saltar el else
            quadGoto := ast.Cuadruplos.GetItem(goto_Jump) 
            quadGoto.Res = ast.Cuadruplos.Size() 
            ast.Cuadruplos.Update(goto_Jump, quadGoto) 

            //Llenar el GOTOF: apunta al inicio del else
            quadGoToF := ast.Cuadruplos.GetItem(falseJump)
            quadGoToF.Res = goto_Jump + 1   //salta al quad despues del GOTO (que es el else)
            ast.Cuadruplos.Update(falseJump, quadGoToF)
        } else {
            // Solo Pop del GOTOF (condición)
            falseJump := ast.PJumps.Pop()
            quadGoToF := ast.Cuadruplos.GetItem(falseJump)
            quadGoToF.Res = ast.Cuadruplos.Size()
            ast.Cuadruplos.Update(falseJump, quadGoToF)
        }
        
        return nil, nil
    }()
    >>;

CONDITION:
    lparen EXPRESION rparen 
    <<
    func() (Attrib, error){
        //validar condiction
        cond := ast.Operandos.Pop()
        tipo := ast.Tipos.Pop()

        err := ast.VerificarCondicion(tipo)
        if(err != nil){
            return nil, err
        }

        //Generar cuadruplo GoToF
        quad := ast.NewQuadruple("GOTOF", cond, 0, 0)
        ast.Cuadruplos.Enqueue(quad)

        //Guardar el indice del cuadruplo para regresar a llenarlo
        ast.PJumps.Push(ast.Cuadruplos.Size() - 1)

        return nil, nil
    }()
    >>;

ELSE_BODY:
    else ELSE_JUMP Body  
    <<
    func() (Attrib, error){
        return true, nil
    }()
    >>;

ELSE_BODY:
    empty      
    <<
    func() (Attrib, error){
        return false, nil
    }()
    >>;

ELSE_JUMP:
    empty   
    <<
    func() (Attrib, error){
        quad := ast.NewQuadruple("GOTO", 0, 0, 0)
        ast.Cuadruplos.Enqueue(quad)
        ast.PJumps.Push(ast.Cuadruplos.Size() - 1) //size - 1 agarra el quad GOTO que se acaba de hacer
        return nil, nil
    }()
    >>;


CYCLE:
    WHILE_START CONDITION do Body WHILE_END semicolon               ;

WHILE_START:
    while   
    <<
    func() (Attrib, error){
        ast.PJumps.Push(ast.Cuadruplos.Size())  //marca inicio de while
        return nil, nil
    }()
    >>;

WHILE_END:
    empty   
    <<
    func()(Attrib, error){
        falseJump := ast.PJumps.Pop()   //el GOTOF
        returnJump := ast.PJumps.Pop()  //el inicio del ciclo

        //GOTO para regresar al inicio del ciclo
        quadGoTo := ast.NewQuadruple("GOTO", 0, 0, returnJump)
        ast.Cuadruplos.Enqueue(quadGoTo)

        //BackPatch al GOTOF para salir del ciclo
        quadGoToF := ast.Cuadruplos.GetItem(falseJump)
        quadGoToF.Res = ast.Cuadruplos.Size()
        ast.Cuadruplos.Update(falseJump, quadGoToF)

        return nil, nil
    }()
    >>;

F_CALL:
    id lparen EXPRESION_STATEMENT rparen semicolon                ;

EXPRESION_STATEMENT:
    EXPRESION MAS_EXPRESIONES     ;

EXPRESION_STATEMENT:  
    empty      ;

MAS_EXPRESIONES:
    comma EXPRESION MAS_EXPRESIONES     ;

MAS_EXPRESIONES:   
    empty       ;

PRINT:
    print lparen LISTA_PRINT rparen semicolon      
    <<
    func() (Attrib, error){

        lista := $2.([]int)

        for dir := range lista {
            err := ast.GenerateQuadrupleForPrint(lista[dir])
            if (err !=nil){
                return nil, err
            }
        } 
        return nil, nil
    }()
    >>;

LISTA_PRINT:
    EXPRESION_PRINT EXPRESIONES_PRINT     
    <<
    func() (Attrib, error){
        // Obtener la primera expresión
        primera := $0.(int)

        // Obtener la lista de expresiones adicionales
        adicionales := $1.([]int)

        // Combinar en una sola lista
        lista := append([]int{primera}, adicionales...)

        return lista, nil
    }()
    >>;

EXPRESION_PRINT:
    EXPRESION          
    <<
    func() (Attrib, error){

        //if ast.Operandos.IsEmpty() {
        //    return nil, error
        //}

        // Hacer Pop del resultado de la pila de operandos
        direccion := ast.Operandos.Pop()
        ast.Tipos.Pop()  // descartar el tipo

        return direccion, nil
    }()
    >>;

EXPRESION_PRINT:
    cte_string          
    <<
    func() (Attrib, error){
       // valor := string($0.(*token.Token).Lit)
        //ast.Operandos.Push(valor)

        direccion := ast.Prog_MemoryManager.GetStringConstMem()
        return direccion,nil
    }()
    >>;

EXPRESIONES_PRINT:
    comma EXPRESION_PRINT EXPRESIONES_PRINT         
    <<
    func() (Attrib, error) {
        // Agregar la expresión actual al inicio de la lista
        valor := $1.(int)
        lista := $2.([]int)

        lista = append([]int{valor}, lista...)

        return lista, nil
    }()
    >>;

EXPRESIONES_PRINT:
    empty      
    <<
    func() (Attrib, error) {
        return []int{}, nil
    }()
    >>;