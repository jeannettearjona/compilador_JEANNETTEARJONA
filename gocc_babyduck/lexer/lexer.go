// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"os"
	"unicode/utf8"

	"gocc_babyduck/token"
)

const (
	NoState    = -1
	NumStates  = 71
	NumSymbols = 122
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := os.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: 'p'
1: 'r'
2: 'o'
3: 'g'
4: 'r'
5: 'a'
6: 'm'
7: 'm'
8: 'a'
9: 'i'
10: 'n'
11: 'e'
12: 'n'
13: 'd'
14: 'v'
15: 'a'
16: 'r'
17: 'i'
18: 'n'
19: 't'
20: 'f'
21: 'l'
22: 'o'
23: 'a'
24: 't'
25: 'p'
26: 'r'
27: 'i'
28: 'n'
29: 't'
30: 'w'
31: 'h'
32: 'i'
33: 'l'
34: 'e'
35: 'd'
36: 'o'
37: 'i'
38: 'f'
39: 'e'
40: 'l'
41: 's'
42: 'e'
43: 'v'
44: 'o'
45: 'i'
46: 'd'
47: '+'
48: '-'
49: '*'
50: '/'
51: '='
52: '>'
53: '<'
54: '!'
55: '='
56: '('
57: ')'
58: '{'
59: '}'
60: '['
61: ']'
62: ','
63: ';'
64: ':'
65: '0'
66: '-'
67: '-'
68: '.'
69: '"'
70: '"'
71: '!'
72: '#'
73: '$'
74: '%'
75: '&'
76: '''
77: '('
78: ')'
79: '*'
80: '+'
81: ','
82: '-'
83: '.'
84: '/'
85: ':'
86: ';'
87: '<'
88: '='
89: '>'
90: '?'
91: '@'
92: '['
93: '\'
94: ']'
95: '^'
96: '_'
97: '`'
98: '{'
99: '|'
100: '}'
101: '~'
102: ' '
103: ' '
104: '\t'
105: '\n'
106: '\r'
107: 'a'-'z'
108: 'A'-'Z'
109: 'a'-'z'
110: 'A'-'Z'
111: '0'-'9'
112: '1'-'9'
113: '0'-'9'
114: '0'-'9'
115: '0'-'9'
116: '0'-'9'
117: '0'-'9'
118: 'a'-'z'
119: 'A'-'Z'
120: '0'-'9'
121: .
*/
