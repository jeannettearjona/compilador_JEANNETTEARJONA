/* Lexico */

//Palabras reservadas
program    : 'p' 'r' 'o' 'g' 'r' 'a' 'm';
main       : 'm' 'a' 'i' 'n';
end        : 'e' 'n' 'd';
var        : 'v' 'a' 'r';
int        : 'i' 'n' 't';
float      : 'f' 'l' 'o' 'a' 't';
print      : 'p' 'r' 'i' 'n' 't';
while      : 'w' 'h' 'i' 'l' 'e';
do         : 'd' 'o';
if         : 'i' 'f';   
else       : 'e' 'l' 's' 'e';
void       : 'v' 'o' 'i' 'd';
plus       : '+';
minus      : '-';
multiply   : '*';
divide     : '/';
assign     : '=';
gt         : '>';
lt         : '<';
neq        : '!' '=';
lparen     : '(';
rparen     : ')';
lbrace     : '{';
rbrace     : '}';
lbraket    : '[';
rbraket    : ']';
comma      : ',';
semicolon  : ';'; 
colon      : ':';

//Tokens
id         : ('a'-'z' | 'A'-'Z') {( 'a'-'z' | 'A'-'Z' | '0'-'9' )} ;
cte_int : '0' | ['-'] '1'-'9' {'0'-'9'} ;
cte_float  : ['-'] '0'-'9' { '0'-'9' } '.' '0'-'9' { '0'-'9' } ;
cte_string : '"' { _char } '"' ;
_char: 'a'-'z' | 'A'-'Z' | '0'-'9' | '!' | '#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '[' | '\\' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~' | ' ' ;
!whitespace: ' '|'\t'|'\n'|'\r';


/* Sintaxis */

Programa:
    DECLARA_PROG FUNCS_PROG main Body end    ;

DECLARA_PROG:
    program id semicolon VARS_PROG
    <<
    func() (Attrib, error){
        nombre_prog := string($1.(*token.Token).Lit)

        //agregar prog a FunctionDir
        _, err := ast.Declare_Function(
            nombre_prog,                // nombre
            []ast.VariableInfo{},       // sin params
            $3.(*ast.HashMap),          // vars globales
        )

        if err != nil {
            return nil, err
        }

        //agregar tabla vacia de temps y de ctes

        return nil, nil
    }()
    >>;

VARS_PROG:
    VARS   
    <<
    func() (Attrib, error) {
        variables := $0.([]ast.VariableInfo)    //slice de variables (name,type)

        variables_globales, err := ast.Declare_GlobalVars(variables)
        if err != nil {
            return nil, err
        }

        return variables_globales, nil
    }()
    >>;

VARS_PROG:
    empty   <<ast.NewHashMap(), nil>>;

FUNCS_PROG:
    FUNCS FUNCS_PROG    ;

FUNCS_PROG:
    empty       ;

VARS:
    var VARIABLES    <<$1, nil>> ;

VARIABLES:
    ID_LIST colon TYPE semicolon MAS_VARIABLES          
   <<
   func() (Attrib, error) {
        //crear SLICE (no mapa) de vars
        id_list := $0.([]string)
        type_vars := $2.(string)

        variables := ast.Create_VarList(id_list, type_vars)

        //agregar las variables adicionales
        additionalVars := $4.([]ast.VariableInfo)
        variables = append(variables, additionalVars...)

        return variables, nil
   }()
   >>;

MAS_VARIABLES:
    VARIABLES     <<$0, nil>> ;

MAS_VARIABLES:
    empty       <<[]ast.VariableInfo{}, nil>>;

ID_LIST:
    id MAS_IDS     
    <<
    func() (Attrib, error){
        id := string($0.(*token.Token).Lit)
        mas_ids := $1.([]string)

        id_list := append([]string{id}, mas_ids...)

        return id_list, nil
    }()
    >>;      

MAS_IDS:
    comma ID_LIST           <<$1, nil>>;

MAS_IDS:
    empty      << []string{}, nil >>  ;

TYPE:
    int         <<"int", nil>>;

TYPE:
    float       <<"float", nil>>;

FUNCS:
    DECLARA_FUNC lbraket VARS_FUNC Body rbraket semicolon     
    <<
        func() (Attrib, error){
            ast.CurrentFunction = nil
            return nil, nil
        }()
    >>;

DECLARA_FUNC:
    void id lparen HAY_PARAMS rparen
    <<
        func() (Attrib, error){
            nombre_fun := string($1.(*token.Token).Lit)
            parametros := $3.([]ast.VariableInfo)
            local_varMap := ast.NewHashMap()

            _, err := ast.Declare_Function(
                nombre_fun,
                parametros,
                local_varMap,                //tabla de variables vacia
            )

            if err != nil {
                return nil, err
            }

            //ast.CurrentFunction = funcion

            return nil, nil
        }()
    >>;


HAY_PARAMS:
    PARAMETROS      <<$0, nil>>;

HAY_PARAMS:
    empty           <<[]ast.VariableInfo{}, nil>>;

PARAMETROS:
    PARAM MAS_PARAMS    
    <<
    func() (Attrib, error){
        param := $0.(ast.VariableInfo)
        mas_params := $1.([]ast.VariableInfo)

        parametros := append([]ast.VariableInfo {param}, mas_params...)

        return parametros, nil
    }()
    >>;

PARAM:
    id colon TYPE       
    <<
    func() (Attrib, error) {
        parametro := ast.VariableInfo {
            Name: string($0.(*token.Token).Lit),    //nombre
            Type: $2.(string),                       //tipo
                                                    //memoria?
        }
        return parametro, nil
    }()
    >>;

MAS_PARAMS:
    comma PARAMETROS    <<$1, nil>>;

MAS_PARAMS:
    empty               <<[]ast.VariableInfo{}, nil>>;

VARS_FUNC:
    VARS    
    <<
    func() (Attrib, error){

        parametros := ast.CurrentFunction.Parameters
        variables := $0.([]ast.VariableInfo)

        //lista de params y vars locales
        variables_locales := append(parametros, variables...)

        err := ast.Declare_LocalVars(variables_locales)

        if err != nil {
            return nil, err
        }

        return nil, nil
    }()
    >>;

VARS_FUNC:
empty       <<nil, nil>>;


Body:
    lbrace STATEMENT_PROG rbrace        ;

STATEMENT_PROG:
    STATEMENT STATEMENT_PROG        ;

STATEMENT_PROG:  
    empty       ;

STATEMENT:
    ASSIGN     ;

STATEMENT:
    IF   ;

STATEMENT:
    CYCLE       ;

STATEMENT:
    F_CALL      ;

STATEMENT:
    PRINT       ;

ASSIGN:
    id assign EXPRESION semicolon       
    <<
    func() (Attrib, error){
        //Verificacion de variable no declarada
        nombre := string($0.(*token.Token).Lit)

        varInfo, err := ast.BuscarVariable(nombre)
        if (err != nil){
            return nil, err
        }

        //asignacion
        err = ast.GenerateQuadrupleForAssign(varInfo)
        
        if err != nil {
            return nil, err
        }
        return nil, nil
    }()
    >>;

EXPRESION:
    EXP         ;

EXPRESION:
    EXP OP_REL EXP
    <<
    func() (Attrib, error){

        //checar si hay operadores-operandos
        err := ast.IsStackEmpty()
        if err != nil {
            return nil, err
        }

        err = ast.GenerateQuadrupleForExp()
        if err != nil {
            return nil, err
        }
        return nil, nil
    }()
    >>;

OP_REL:
    gt
    <<func() (Attrib, error){
        ast.Operadores.Push(">")
        return nil, nil
    }()
    >>;

OP_REL:
    lt
    <<func() (Attrib, error){
        ast.Operadores.Push("<")
        return nil, nil
    }()
    >>;

OP_REL:
    neq
    <<func() (Attrib, error){
        ast.Operadores.Push("!=")
        return nil, nil
    }()
    >>;

EXP:
    TERMINO        ;

EXP:
    TERMINO PLUS_MINUS TERMINO     
    <<
    func() (Attrib, error){

        //checar si hay operadores-operandos
        err := ast.IsStackEmpty()
        if err != nil {
            return nil, err
        }

        operador := ast.Operadores.Top()

        if(operador == "+" || operador == "-") {
            err := ast.GenerateQuadrupleForExp()
            if err != nil {
                return nil, err
            }
            return nil, nil
        }
        return nil, nil 
    }()
    >>;

PLUS_MINUS:
    plus        
    <<
    func() (Attrib, error){
        ast.Operadores.Push("+")
        return nil, nil
    }()
    >>;

PLUS_MINUS:
    minus        
    <<
    func() (Attrib, error){
        ast.Operadores.Push("-")
        return nil, nil
    }()
    >>;

TERMINO:
    FACTOR      ;

TERMINO:
    FACTOR MULT_DIV FACTOR      
    <<
    func() (Attrib, error){

        //checar si hay operadores-operandos
        err := ast.IsStackEmpty()
        if err != nil {
            return nil, err
        }

        operador := ast.Operadores.Top()

        if(operador == "*" || operador == "/") {
            err := ast.GenerateQuadrupleForExp()
            if err != nil {
                return nil, err
            }
            return nil, nil
        }
        return nil, nil 
    }()
    >>;

MULT_DIV:
    multiply        
    <<
    func() (Attrib, error){
        ast.Operadores.Push("*")
        return nil, nil
    }()
    >>;

MULT_DIV:
    divide        
    <<
    func() (Attrib, error){
        ast.Operadores.Push("/")
        return nil, nil
    }()
    >>;

FACTOR:
    FONDO_FALSO EXPRESION rparen   
    <<
    func() (Attrib, error){

        //checar si hay operadores-operandos
        err := ast.IsStackEmpty()
        if err != nil {
            return nil, err
        }

        operador := ast.Operadores.Top()

        for( operador != "(" ){
            err := ast.GenerateQuadrupleForExp()
            if err != nil {
                return nil, err
            }
        }
        ast.Operadores.Pop()
        
        return nil, nil
    }()
    >>;

FONDO_FALSO:
    lparen
    <<
    func() (Attrib, error){
        ast.Operadores.Push("(")
        return nil, nil
    }()
    >>;

FACTOR:
    FACTOR_OPERADOR ID_CTE   ;

FACTOR_OPERADOR:
    PLUS_MINUS      ;
    
FACTOR_OPERADOR:
    empty      ;

ID_CTE:
    id      
    <<
    func() (Attrib, error){

        nombre_var := string($0.(*token.Token).Lit)

        //verificacion de variable
        varInfo, error := ast.BuscarVariable(nombre_var)
        if (error != nil){
            return nil, error
        }

        //si si existe, agregarla a los stacks
        ast.Operandos.Push(varInfo.Address)
        ast.Tipos.Push(varInfo.Type)
        
        return nil, nil
    }()
    >>;

ID_CTE:
    CTE  
    <<
    func() (Attrib, error){
        cte := $0.([]string) //slice con info de la cte
        valor := cte[0]
        tipo := cte[1]

        direccion := ast.Declare_Constant(valor, tipo)

        ast.Operandos.Push(direccion)
        ast.Tipos.Push(tipo)

        return nil, nil
    }()
    >>;

CTE:
    cte_int     
    <<
    func() (Attrib, error) {
        valor := string($0.(*token.Token).Lit)
        cte_int := []string {valor, "int"}
        return cte_int, nil
    }()
    >>;

CTE:
    cte_float   
    <<
    func() (Attrib, error) {
        valor := string($0.(*token.Token).Lit)
        cte_float := []string {valor, "float"}
        return cte_float, nil
    }()
    >>;

IF:
    if CONDITION Body ELSE_BODY semicolon        
    <<
    func() (Attrib, error){
        hayElse := $3.(bool)

        if(hayElse){

            //llenar el GOTO
            quad_GOTO := ast.PJumps.Pop()
            value_GOTO := ast.Cuadruplos.Size()
            err := ast.Fill_QuadJumps(quad_GOTO, value_GOTO)

            if(err != nil){
                return nil, err
            }

            //llenar el GOTOF
            quad_GOTOF := ast.PJumps.Pop()
            value_GOTOF := quad_GOTO + 1
            err = ast.Fill_QuadJumps(quad_GOTOF, value_GOTOF)

            if(err!=nil){
                return nil, err
            }

        } else {
            //si no hay else, llenar solo GOTOF
            quad_GOTOF := ast.PJumps.Pop()
            value_GOTOF := ast.Cuadruplos.Size()
            err := ast.Fill_QuadJumps(quad_GOTOF, value_GOTOF)

            if(err!=nil){
                return nil, err
            }
        }
        return nil, nil
    }()
    >>;

CONDITION:
    lparen EXPRESION rparen 
    <<
    func() (Attrib, error){
        err := ast.GenerateQuad_GOTOF()

        if(err != nil){
            return nil, err
        }
        
        return nil, nil
    }()
    >>;

ELSE_BODY:
    else ELSE_JUMP Body  
    <<
    func() (Attrib, error){
        return true, nil
    }()
    >>;

ELSE_BODY:
    empty      
    <<
    func() (Attrib, error){
        return false, nil
    }()
    >>;

ELSE_JUMP:
    empty   
    <<
    func() (Attrib, error){
        err := ast.GenerateQuad_GOTO()

        if(err != nil){
            return nil, err
        }
        
        return nil, nil
    }()
    >>;


CYCLE:
    WHILE_START CONDITION do Body WHILE_END semicolon               ;

WHILE_START:
    while   
    <<
    func() (Attrib, error){
        ast.PJumps.Push(ast.Cuadruplos.Size())  //quad de lo que hace la condicion
        return nil, nil
    }()
    >>;

WHILE_END:
    empty   
    <<
    func()(Attrib, error){
        quad_GOTOF := ast.PJumps.Pop()
        quad_whileSTART := ast.PJumps.Pop()

        //llenar GOTO (que regresa al while)
        op_code := ast.CodigoNum_Operador["GOTO"]
        quadGO_TO := ast.NewQuadruple(op_code, 0, 0, quad_whileSTART)
        ast.Cuadruplos.Enqueue(quadGO_TO)

        //llenar GOTOF
        value_GOTOF := ast.Cuadruplos.Size()
        err := ast.Fill_QuadJumps(quad_GOTOF, value_GOTOF)

        if(err!=nil){
            return nil, err
        }

        return nil, nil
    }()
    >>;

F_CALL:
    FUNC_CALL_START lparen EXPRESION_STATEMENT rparen semicolon                ;

FUNC_CALL_START:
    id      ;
    //<<
    //func() (Attrib, error){
    //    id := $1.(string)
        
    //}()
    //>>;

EXPRESION_STATEMENT:
    EXPRESION MAS_EXPRESIONES     ;

EXPRESION_STATEMENT:  
    empty      ;

MAS_EXPRESIONES:
    comma EXPRESION MAS_EXPRESIONES     ;

MAS_EXPRESIONES:   
    empty       ;

PRINT:
    print lparen LISTA_PRINT rparen semicolon      
    <<
    func() (Attrib, error){

        lista := $2.([]int)

        for dir := range lista {
            err := ast.GenerateQuadrupleForPrint(lista[dir])
            if (err !=nil){
                return nil, err
            }
        } 
        return nil, nil
    }()
    >>;

LISTA_PRINT:
    EXPRESION_PRINT EXPRESIONES_PRINT     
    <<
    func() (Attrib, error){
        // Obtener la primera expresión
        primera := $0.(int)

        // Obtener la lista de expresiones adicionales
        adicionales := $1.([]int)

        // Combinar en una sola lista
        lista := append([]int{primera}, adicionales...)

        return lista, nil
    }()
    >>;

EXPRESION_PRINT:
    EXPRESION          
    <<
    func() (Attrib, error){

        //if ast.Operandos.IsEmpty() {
        //    return nil, error
        //}

        // Hacer Pop del resultado de la pila de operandos
        direccion := ast.Operandos.Pop()
        ast.Tipos.Pop()  // descartar el tipo

        return direccion, nil
    }()
    >>;

EXPRESION_PRINT:
    cte_string          
    <<
    func() (Attrib, error){
        valor := string($0.(*token.Token).Lit)

        direccion := ast.Declare_Constant(valor,"string")
        return direccion,nil
    }()
    >>;

EXPRESIONES_PRINT:
    comma EXPRESION_PRINT EXPRESIONES_PRINT         
    <<
    func() (Attrib, error) {
        // Agregar la expresión actual al inicio de la lista
        valor := $1.(int)
        lista := $2.([]int)

        lista = append([]int{valor}, lista...)

        return lista, nil
    }()
    >>;

EXPRESIONES_PRINT:
    empty      
    <<
    func() (Attrib, error) {
        return []int{}, nil
    }()
    >>;